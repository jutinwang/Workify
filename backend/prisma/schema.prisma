// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  EMPLOYER
}

enum Gender {
  WOMAN
  MAN
  NON_BINARY
  TWO_SPIRIT
  PREFER_NOT_TO_SAY
}

enum Ethnicity {
  BLACK
  EAST_ASIAN
  SOUTH_ASIAN
  SOUTHEAST_ASIAN
  MENA
  LATINX
  WHITE
  MIXED
  PREFER_NOT_TO_SAY
}

enum IdentityFlag {
  INDIGENOUS
  DISABILITY
  VETERAN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())

  student    StudentProfile?
  employer   EmployerProfile?
  admin      AdminProfile?
}

model StudentProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  major       String?
  year        Int?
  resumeUrl   String?
  linkedInUrl String?
  githubUrl   String?
  phoneNumber String?
  transcript  String?
  aboutMe     String?  @db.Text
  bookmarks   Int[]

  // demographics
  gender    Gender
  ethnicity Ethnicity[] // Postgres enum array
  optional  IdentityFlag[] // Postgres enum array

  experience Experience[]
  educations   Education[]
  applications Application[]
  interviews   InterviewRequest[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?

  student StudentProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmployerProfile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId       Int?
  workPhone       String?
  workEmail       String?
  profilePhotoUrl String?
  notificationMethod String?
  availability    String?
  
  company    Company? @relation(fields: [companyId], references: [id])
  jobs       Job[]
  interviews InterviewRequest[]
  
  @@index([companyId])
}

model AdminProfile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id         Int      @id @default(autoincrement())
  studentId  Int
  program    String
  yearOfStudy Int?
  gradDate   DateTime?
  schoolName String
  
  student    StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
}

model Company {
  id            Int      @id @default(autoincrement())
  name          String
  companyId     String?  @unique
  url           String?
  size          String?
  about         String?  @db.Text
  careersPage   String?
  linkedInUrl   String?
  
  jobs          Job[]
  employees     EmployerProfile[]
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  INTERVIEW
  OFFER
  ACCEPTED
}

model Job {
  id          Int      @id @default(autoincrement())
  companyId   Int
  employerId  Int
  description String   @db.Text
  title       String
  location    String?
  type        String?  // Full-time, Part-time, Internship
  salary      String?
  requirements String? @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employer    EmployerProfile @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]
  
  @@index([companyId])
  @@index([employerId])
}

model Application {
  id            Int      @id @default(autoincrement())
  jobId         Int
  studentId     Int
  status        ApplicationStatus @default(PENDING)
  shortlisted   Boolean  @default(false)
  appliedAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  coverLetter   String?  @db.Text
  
  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, studentId]) // Student can only apply once per job
  @@index([studentId])
  @@index([jobId])
}

enum InterviewStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

model InterviewRequest {
  id          Int      @id @default(autoincrement())
  studentId   Int
  employerId  Int
  jobId       Int?
  status      InterviewStatus @default(PENDING)
  inviteList  Json?    // Store list of student and employer IDs
  calendarData Json?   // Store calendar/scheduling info
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  employer    EmployerProfile @relation(fields: [employerId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
  @@index([employerId])
}
